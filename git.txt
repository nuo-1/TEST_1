    git init
    使用 ll 可以查看生成了一个隐藏的.git文件

    git add .
    其中，点 . 表示添加当前文件夹中的所有文件

    git config –global user.email “you@example.com”
    输入 github 的注册邮箱

    git config –global user.name “Your Name”
    输入 github 的用户名

    git commit -m “first commit”
    双引号内是上传时的注释内容

    git remote add origin https://github.com/……………
    这里的网址，即对应前面 repository 的地址。
    如果是第一次添加的话，一般没什么问题。如果出现 “remote origin already exists” 的错误，可以先执行 	git remote rm origin

    (git push -u origin master)
    将文件推送到 github 上，此时会让你继续输入用户名和密码。 如果在创建 repository 的时候加入了readme，相当于对原仓库已做了修改，此时该命令会报错。可以用 git push -f origin master 来强制覆盖。

	git branch test
	新建本地分支
	
	git push origin test
	把本地分支推送到远程仓库
	* 1. 首先要确定你在远程仓库是否创建成功dev分支

	* $ git branch -r  
	
	* 2. 如果分支已经创立好了，而执行还是同样的错误，那么就需要从git上重新拉取数据然后再创建远程分支到本地。

	* $ git pull
	* $ git checkout -b 分支名 origin/分支名
	
	* 3. 如果你的远程分支仓库并未创建出来，那么你可以选择执行下面这条语句，在远程仓库创建你需要的分支。

	* $ git push origin 分支名


/*因此，多人协作的工作模式通常是这样：

    首先，可以试图用git push origin <branch-name>推送自己的修改；

    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

    如果合并有冲突，则解决冲突，并在本地提交；

    没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

	这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结:

    查看远程库信息，使用git remote -v；

    本地新建的分支如果不推送到远程，对其他人就是不可见的；

    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
*/


question 1:
切换分支时出错：
error: Your local changes to the following files would be overwritten by checkout:
	git.txt
Please commit your changes or stash them before you switch branches.
Aborting

/*//第一种方式 存到暂存区
git add.
git stash 
//取出的时候使用 
git stash pop

//第二种方式 发起一个commit 存到提交历史
git add.
git commit -m "commit message"*/
	
